[{"E:\\bt\\Nodejs\\React\\puzzle-games\\src\\index.tsx":"1","E:\\bt\\Nodejs\\React\\puzzle-games\\src\\reportWebVitals.ts":"2","E:\\bt\\Nodejs\\React\\puzzle-games\\src\\components\\Container.tsx":"3","E:\\bt\\Nodejs\\React\\puzzle-games\\src\\components\\Square.tsx":"4"},{"size":538,"mtime":1611805691827,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":3933,"mtime":1611810409054,"results":"8","hashOfConfig":"6"},{"size":3194,"mtime":1611810271528,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vj4rcs",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\bt\\Nodejs\\React\\puzzle-games\\src\\index.tsx",[],"E:\\bt\\Nodejs\\React\\puzzle-games\\src\\reportWebVitals.ts",[],["20","21"],"E:\\bt\\Nodejs\\React\\puzzle-games\\src\\components\\Container.tsx",["22"],"import React from 'react';\r\nimport Square from './Square';\r\nimport './Puzzle-15.css';\r\nimport { isPropertySignature } from 'typescript';\r\n\r\ninterface IContainerProps {\r\n\r\n}\r\n\r\ninterface IContainerStates {\r\n    row: number;\r\n    col: number;\r\n    moveCount: number\r\n}\r\n\r\nfunction shuffledArray(array: unknown[]) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n}\r\n\r\nexport default class Container extends React.Component<IContainerProps, IContainerStates>{\r\n    xBlankIndex: number;\r\n    yBlankIndex: number;\r\n    isPosittionCorrectArray: any[];\r\n    shuffledArray: any[];\r\n\r\n    constructor(props: IContainerProps) {\r\n        super(props);\r\n        this.state = {\r\n            row: 4,\r\n            col: 4,\r\n            moveCount: 0\r\n        }\r\n        this.xBlankIndex = this.state.row;\r\n        this.yBlankIndex = this.state.col;\r\n        this.isPosittionCorrectArray = [];\r\n        this.shuffledArray = [];\r\n        for (let i = 1; i < this.state.col * this.state.row; i++) {\r\n            this.shuffledArray.push(i);\r\n        }\r\n        shuffledArray(this.shuffledArray);\r\n        this.shuffledArray.forEach((item: number, index: number) => {\r\n            if (item === index + 1) {\r\n                this.isPosittionCorrectArray.push(true);\r\n            } else {\r\n                this.isPosittionCorrectArray.push(false);\r\n            }\r\n        });\r\n    }\r\n    switchBlankIndex = (xIndex: number, yIndex: number) => {\r\n        this.xBlankIndex = xIndex;\r\n        this.yBlankIndex = yIndex;\r\n        this.setState({\r\n            moveCount:this.state.moveCount+1\r\n        })\r\n    }\r\n    getState = () => {\r\n        return {\r\n            xBlankIndex: this.xBlankIndex,\r\n            yBlankIndex: this.yBlankIndex,\r\n            row: this.state.row,\r\n            col: this.state.col,\r\n        }\r\n    }\r\n\r\n    setPosittionArray = (index: number, isCorrect: boolean) => {\r\n        console.log(\"isCorrect: \" + isCorrect);\r\n        this.isPosittionCorrectArray[index] = isCorrect;\r\n        if (this.checkEndGame()) {\r\n            console.log(\"Check end game is running\")\r\n            setTimeout(function (this: any) {\r\n                alert(\"Winner Winner Chicken Dinner!!! \\n Your move: \" + this.state.moveCount);\r\n            }, 200);\r\n        }\r\n    }\r\n    checkEndGame = (): boolean => {\r\n        for (let i = 0; i < this.isPosittionCorrectArray.length; i++) {\r\n            if (!this.isPosittionCorrectArray[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    setSquareList = () => {\r\n        let squareArray: any[] = [];\r\n        let count: number = 0;\r\n        for (let i = 0; i < this.state.row; i++) {\r\n            for (let j = 0; j < this.state.col; j++) {\r\n                if (count < (this.state.col * this.state.row) - 1) {\r\n                    squareArray.push(\r\n                        <Square key={count} xIndex={i + 1} yIndex={j + 1}\r\n                            value={this.shuffledArray[count]} onClick={this.switchBlankIndex}\r\n                            getState={this.getState} setCorrectPossion={this.isPosittionCorrectArray}\r\n                            setPosittionArray={this.setPosittionArray}\r\n                        ></Square>\r\n                    )\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        return squareArray;\r\n    }\r\n    render() {\r\n        const containerStyle = {\r\n            gridTemplateColumns: \"repeat(\" + this.state.col + \", 100px)\",\r\n            gridTemplateRows: \"repeat(\" + this.state.row + \", 100px)\",\r\n        };\r\n        return (\r\n            <div>\r\n                <p>Moves:{this.state.moveCount}</p>\r\n                <div style={containerStyle} className=\"containerG15P\">\r\n                    {this.setSquareList()}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","E:\\bt\\Nodejs\\React\\puzzle-games\\src\\components\\Square.tsx",["23"],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":4,"column":10,"nodeType":"30","messageId":"31","endLine":4,"endColumn":29},{"ruleId":"28","severity":1,"message":"32","line":1,"column":10,"nodeType":"30","messageId":"31","endLine":1,"endColumn":17},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"@typescript-eslint/no-unused-vars","'isPropertySignature' is defined but never used.","Identifier","unusedVar","'Console' is defined but never used.","no-global-assign","no-unsafe-negation"]